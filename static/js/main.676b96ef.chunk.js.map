{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constant.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","filteredRobots","isPending","filter","robot","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.676b96ef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>          \r\n        </div>\r\n\r\n\r\n);\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n        {\r\n        robots.map((user, i) => {\r\n            return (<Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} \r\n                />\r\n                );\r\n        })    \r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n      className= 'pa3 ba b--green bg-lightest-blue'\r\n      type=\"search\" \r\n      placeholder=\"search robots\"\r\n      onChange={searchChange}\r\n       />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n        {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;\r\n\r\n//props\r\n//state\r\n//children\r\n//any props objects have children\r\n","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n}\r\n\r\ncomponentDidCatch(error, info) {\r\nthis.setState({hasError: true })\r\n}\r\nrender(){\r\n    if (this.state.hasError) {\r\n        return <h1>Ooops. that's not good</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport './App.css';\r\n\r\nimport { requestRobots, setSearchField } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n}\r\n}\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      })\r\n      return !robots.length ?\r\n       <h1>Loading</h1> :\r\n       (\r\n      <div className=\"tc\">\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n        <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from \"./constant.js\"\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\ntype: CHANGE_SEARCH_FIELD,\r\npayload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:  data}))\r\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n     } ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from \"./constant.js\"\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n            case REQUEST_ROBOTS_SUCCESS:\r\n                return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n                case REQUEST_ROBOTS_FAILED:\r\n                    return Object.assign({},state, { error: action.payload, isPending: false })\r\n                    default:\r\n                        return state;\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk'; \nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots,requestRobots})\nconst store = \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n<Provider store={store}>\n    <App/>\n    </Provider>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}